package com.example.demo.service;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.sleuth.Span;
import org.springframework.cloud.sleuth.Tracer;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.demo.dto.InventoryResponse;
import com.example.demo.dto.OrderLineItemsDto;
import com.example.demo.dto.OrderRequest;
import com.example.demo.model.Order;
import com.example.demo.model.OrderLineItems;
import com.example.demo.repository.OrderRepository;

@Service
@Transactional
public class OrderService {

	@Autowired
	private OrderRepository orderRepository;
	
	@Autowired
	private WebClient.Builder webClientBuilder;
	
	@Autowired
	private Tracer tracer;
	
	@Autowired
	private KafkaTemplate kafkaTemplate;
	
	public String placeOrder(OrderRequest orderRequest) {
		Order order = new Order(); 
		order.setOrderNumber(UUID.randomUUID().toString());
		
		List<OrderLineItems> orderLineItems = orderRequest.getOrderLineItemsDtoList()
				.stream()
				.map(this::mapToDto)
				.toList();
		order.setOrderLineItemsList(orderLineItems);
		
		List<String> skuCodes = order.getOrderLineItemsList().stream()
									.map(OrderLineItems::getSkuCode)
									.toList();
		
		Span inventoryServiceLookup =tracer.nextSpan().name("InventoryServiceLookup");
		
		
		
		try(Tracer.SpanInScope spanInScope = tracer.withSpan(inventoryServiceLookup.start())){
			
			//Call Inventory Service, and place order if product is in stock
			InventoryResponse[] inventoryResponseArray = webClientBuilder.build().get()
						.uri("http://inventory-service/api/inventory", 
								uriBuilder -> uriBuilder.queryParam("skuCode", skuCodes).build())
						.retrieve()
						.bodyToMono(InventoryResponse[].class)
						.block();
			
			boolean allProductsInStock = Arrays.stream(inventoryResponseArray).allMatch(InventoryResponse::isInStock);
			
			if(allProductsInStock) 
			{
				orderRepository.save(order);
				kafkaTemplate.send("notificationTopic", order.getOrderNumber());
				return "Order Placed Successfully!";
			}
			
			else 
			{
				throw new IllegalArgumentException("Product is not in stock, Please try again later.");
			}
			
			
		}finally {
			inventoryServiceLookup.end();
		}
		
		
		
		
	}
	
	private OrderLineItems mapToDto(OrderLineItemsDto orderLineItemsDto) {
		OrderLineItems orderLineItems = new OrderLineItems();
		orderLineItems.setPrice(orderLineItemsDto.getPrice());
		orderLineItems.setQuantity(orderLineItemsDto.getQuantity());
		orderLineItems.setSkuCode(orderLineItemsDto.getSkuCode());
		return orderLineItems;
	}
}
